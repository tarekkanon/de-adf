{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafact90134"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/01-Copy-To-Parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copytoparquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "VIN (1-10)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "VIN_1_10",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "County",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "County",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "State",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Postal Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PostalCode",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Model Year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ModelYear",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Make",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Make",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Model",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Model",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Electric Vehicle Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ElectricVehicleType",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Clean Alternative Fuel Vehicle (CAFV) Eligibility",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CleanAlternativeFuelVehicle_CAFV_Eligibility",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Electric Range",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ElectricRange",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Base MSRP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BaseMSRP",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Legislative District",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LegislativeDistrict",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "DOL Vehicle ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DOLVehicleID",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Vehicle Location",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "VehicleLocation",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Electric Utility",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ElectricUtility",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "2020 Census Tract",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "2020CensusTract",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "evpd_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "evpd_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copytodw",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copytoparquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "evpd_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "synapse_dw",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-02T08:41:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/03-Web-And-Folder-Retrieve')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckLink",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.google.com/",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "GetFolderMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "NewCustomersCSVMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFolderMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFolderMetadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyNewCustomersCSV",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Names",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Names",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Age",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Age",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Total_Purchase",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Total_Purchase",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Account_Manager",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Account_Manager",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Years",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Years",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Num_Sites",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Num_Sites",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Onboard_date",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Onboard_date",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Location",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Location",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Company",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Company",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "NewCustomersMetadataFile",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TestCustomerMetadata",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_dataflow_FactSales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesOrderDetail_Table",
								"type": "DatasetReference"
							},
							"name": "SalesOrderDetailStream"
						},
						{
							"dataset": {
								"referenceName": "SalesOrderHeader_Table",
								"type": "DatasetReference"
							},
							"name": "SalesOrderHeaderStream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DW_FactSales_Table",
								"type": "DatasetReference"
							},
							"name": "FactSalesStream"
						}
					],
					"transformations": [
						{
							"name": "SalesOrderDetailToSalesOrderHeader"
						},
						{
							"name": "SelectColumnsStream"
						},
						{
							"name": "TotalAmountStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrderDetailStream",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrderHeaderStream",
						"SalesOrderDetailStream, SalesOrderHeaderStream join(SalesOrderDetailStream@SalesOrderID == SalesOrderHeaderStream@SalesOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SalesOrderDetailToSalesOrderHeader",
						"SalesOrderDetailToSalesOrderHeader select(mapColumn(",
						"          SalesOrderID = SalesOrderDetailStream@SalesOrderID,",
						"          SalesOrderDetailID,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          LineTotal,",
						"          OrderDate,",
						"          CustomerID,",
						"          TaxAmt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsStream",
						"SelectColumnsStream derive(TotalAmount = multiply(UnitPrice, OrderQty)) ~> TotalAmountStream",
						"TotalAmountStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          OrderDate as timestamp,",
						"          CustomerID as integer,",
						"          TaxAmt as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          LineTotal,",
						"          OrderDate,",
						"          CustomerID,",
						"          TaxAmt,",
						"          TotalAmount",
						"     )) ~> FactSalesStream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/02_dataflow_Dimensions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Product_Table",
								"type": "DatasetReference"
							},
							"name": "ProductStream"
						},
						{
							"dataset": {
								"referenceName": "ProductCategory_Table",
								"type": "DatasetReference"
							},
							"name": "ProductCategoryStream"
						},
						{
							"dataset": {
								"referenceName": "ProductModel_Table",
								"type": "DatasetReference"
							},
							"name": "ProductModelStream"
						},
						{
							"dataset": {
								"referenceName": "Customers_Table",
								"type": "DatasetReference"
							},
							"name": "CustomersStream"
						},
						{
							"dataset": {
								"referenceName": "DimCustomers_Table",
								"type": "DatasetReference"
							},
							"name": "GETMAXCustomerSK"
						},
						{
							"dataset": {
								"referenceName": "DimCustomers_Table",
								"type": "DatasetReference"
							},
							"name": "DimCustomersLatest"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimProduct_Table",
								"type": "DatasetReference"
							},
							"name": "DimProductStream"
						},
						{
							"dataset": {
								"referenceName": "DimCustomers_Table",
								"type": "DatasetReference"
							},
							"name": "DimCustomersStream"
						},
						{
							"name": "CustomerSKSink"
						}
					],
					"transformations": [
						{
							"name": "ProductToProductCategory"
						},
						{
							"name": "ToProductModel"
						},
						{
							"name": "SelectColumnsStream"
						},
						{
							"name": "ProductSKStream"
						},
						{
							"name": "SelectColumnsCustomerStream"
						},
						{
							"name": "CustomerSKStream"
						},
						{
							"name": "CustomerSKUpdated"
						},
						{
							"name": "CustomersExistsInWarehouse"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductStream",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategoryStream",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductModelStream",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CustomersStream",
						"source(output(",
						"          CustomerSK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT COALESCE(MAX(CustomerSK), 0) AS CustomerSK FROM DimCustomers',",
						"     format: 'query',",
						"     staged: true) ~> GETMAXCustomerSK",
						"source(output(",
						"          CustomerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> DimCustomersLatest",
						"ProductStream, ProductCategoryStream join(ProductStream@ProductCategoryID == ProductCategoryStream@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductToProductCategory",
						"ProductToProductCategory, ProductModelStream join(ProductStream@ProductModelID == ProductModelStream@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ToProductModel",
						"ToProductModel select(mapColumn(",
						"          ProductID,",
						"          ProductName = ProductStream@Name,",
						"          ProductNumber,",
						"          ProductCategoryName = ProductCategoryStream@Name,",
						"          ProductModelName = ProductModelStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsStream",
						"SelectColumnsStream keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> ProductSKStream",
						"CustomersExistsInWarehouse select(mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsCustomerStream",
						"SelectColumnsCustomerStream keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> CustomerSKStream",
						"CustomerSKStream derive(CustomerSK = CustomerSK + CustomerSKSink#output().CustomerSK) ~> CustomerSKUpdated",
						"CustomersStream, DimCustomersLatest exists(CustomersStream@CustomerID == DimCustomersLatest@CustomerID,",
						"     negate:true,",
						"     broadcast: 'auto')~> CustomersExistsInWarehouse",
						"ProductSKStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          ProductNumber as string,",
						"          ProductCategoryName as string,",
						"          ProductModelName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductSK,",
						"          ProductID,",
						"          ProductName,",
						"          ProductNumber,",
						"          ProductCategoryName,",
						"          ProductModelName",
						"     )) ~> DimProductStream",
						"CustomerSKUpdated sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerSK,",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     )) ~> DimCustomersStream",
						"GETMAXCustomerSK sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          CustomerSK",
						"     )) ~> CustomerSKSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/02-Dataflow-Fact-Dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dtflow_Dimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "02_dataflow_Dimensions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProductStream": {},
									"ProductCategoryStream": {},
									"ProductModelStream": {},
									"CustomersStream": {},
									"GETMAXCustomerSK": {},
									"DimCustomersLatest": {},
									"DimProductStream": {},
									"DimCustomersStream": {},
									"CustomerSKSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "staging_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					},
					{
						"name": "dtflow_Fact",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "dtflow_Dimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "01_dataflow_FactSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SalesOrderDetailStream": {},
									"SalesOrderHeaderStream": {},
									"FactSalesStream": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "staging_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-03T11:54:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/02_dataflow_Dimensions')]",
				"[concat(variables('factoryId'), '/dataflows/01_dataflow_FactSales')]"
			]
		}
	]
}